// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	cstate "github.com/kardiachain/go-kardia/kai/state/cstate"
	genesis "github.com/kardiachain/go-kardia/mainchain/genesis"

	go_kardiatypes "github.com/kardiachain/go-kardia/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/kardiachain/go-kardia/proto/kardiachain/types"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Load provides a mock function with given fields:
func (_m *Store) Load() cstate.LatestBlockState {
	ret := _m.Called()

	var r0 cstate.LatestBlockState
	if rf, ok := ret.Get(0).(func() cstate.LatestBlockState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(cstate.LatestBlockState)
	}

	return r0
}

// LoadConsensusParams provides a mock function with given fields: height
func (_m *Store) LoadConsensusParams(height uint64) (types.ConsensusParams, error) {
	ret := _m.Called(height)

	var r0 types.ConsensusParams
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (types.ConsensusParams, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(uint64) types.ConsensusParams); ok {
		r0 = rf(height)
	} else {
		r0 = ret.Get(0).(types.ConsensusParams)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadStateFromDBOrGenesisDoc provides a mock function with given fields: genesisDoc
func (_m *Store) LoadStateFromDBOrGenesisDoc(genesisDoc *genesis.Genesis) (cstate.LatestBlockState, error) {
	ret := _m.Called(genesisDoc)

	var r0 cstate.LatestBlockState
	var r1 error
	if rf, ok := ret.Get(0).(func(*genesis.Genesis) (cstate.LatestBlockState, error)); ok {
		return rf(genesisDoc)
	}
	if rf, ok := ret.Get(0).(func(*genesis.Genesis) cstate.LatestBlockState); ok {
		r0 = rf(genesisDoc)
	} else {
		r0 = ret.Get(0).(cstate.LatestBlockState)
	}

	if rf, ok := ret.Get(1).(func(*genesis.Genesis) error); ok {
		r1 = rf(genesisDoc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadValidators provides a mock function with given fields: height
func (_m *Store) LoadValidators(height uint64) (*go_kardiatypes.ValidatorSet, error) {
	ret := _m.Called(height)

	var r0 *go_kardiatypes.ValidatorSet
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*go_kardiatypes.ValidatorSet, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(uint64) *go_kardiatypes.ValidatorSet); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_kardiatypes.ValidatorSet)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *Store) Save(_a0 cstate.LatestBlockState) {
	_m.Called(_a0)
}

// SetPruning provides a mock function with given fields: pruning
func (_m *Store) SetPruning(pruning bool) {
	_m.Called(pruning)
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
